/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#define BUF_SIZE 256

extern YYSTYPE yylval; //YYSTYPE
extern yylineno;
char buf[BUF_SIZE];

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { printf("+");return ADD; }
"-" 	{ printf("-");return SUB; }
"*" 	{ printf("*");return MUL; }
"/" 	{ printf("/");return DIV; }
"%"     { printf("%");return MOD; }
"++"    { printf("++");return INC; }
"--"    { printf("--");return DEC; }

 /* Relational */
">"		{ printf(">");return MT; }
"<"		{ printf("<");return LT; }
">="	{ printf(">=");return MTE; }
"<="	{ printf("<=");return LTE; }
"=="	{ printf("==");return EQ; }
"!="	{ printf("!=");return NE; }

 /* Assignment */
"="		{ printf("=");return ASGN; }
"+="	{ printf("+=");return ADDASGN; }
"-="	{ printf("-=");return SUBASGN; }
"*="	{ printf("*=");return MULASGN; }
"/="	{ printf("/=");return DIVASGN; }
"%="	{ printf("%=");return MODASGN; }

 /* Logical */
"&&"	{ printf("&&");return AND; }
"||"	{ printf("||");return OR; }
"!"		{ printf("!");return NOT; }

 /* Delimiters */
"("		{ printf("(");return LB; }
")"		{ printf(")");return RB; }
"{"		{ printf("{");return LCB; }
"}"		{ printf("}");return RCB; }
"["		{ printf("[");return LSB; }
"]"		{ printf("]");return RSB; }
","		{ printf(",");return COMMA; }
 

 /* Print Keywords */	
"print"		{ printf("print");return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ printf("if");return IF; }
"else"		{ printf("else");return ELSE; }
"for"		{ printf("for");return FOR; }
"while"		{ printf("while");return WHILE; }

 /* Declaration Keywords */
"void"		{ printf("void");return VOID;}
"int"		{ printf("int"); return INT; }
"float"  	{ printf("float");return FLOAT; }
"string"  	{ printf("string");return STRING; }
"bool"  	{ printf("bool");return BOOL; }

 /* boolean Keywords */
"true"      { printf("true");return TRUE; }
"false"     { printf("false");return FALSE; }

"return"    { printf("return"); return RET; }
"continue"  { printf("continue");return CONT; }
"break"	    { printf("break");return BREAK; }

 /* String Constant */
\"				        { printf("%s",yytext); BEGIN STRING_STATE; }
<STRING_STATE>\"		{ printf("%s",yytext); BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ printf("777%s7777",yytext); yylval.string=yytext; return STR_CONST; }

 /* Number Constant */
{integer}	{ yylval.i_val = atoi(yytext); printf("%d",atoi(yytext)); return I_CONST; }
{float}	    { yylval.f_val = atof(yytext); printf("%g",atof(yytext)); return F_CONST; }

 /* C type Comment */
"/*"				{ printf("%s",yytext);BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ printf("%s",yytext); }
<COMMENT>\n			{ printf("\n%d: ",yylineno); }
<COMMENT>"*"		{ printf("%s",yytext); }
<COMMENT>"*/"		{ printf("%s",yytext);BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ printf("%s",yytext); }

 /* Variable ID */
 {id}       { printf("%s",yytext); return ID; }

 /* others */

[;]         { printf(";"); return SEMICOLON; }
[\n]        { printf("\n%d: ",yylineno); }
[ \t]		{printf(" ");} /* Ignore */
[^ \t\n] 	{} /* Ignore other charactor sets */
<<EOF>>     { yyterminate();}

%%

int yywrap()
{
    return 1;
}
