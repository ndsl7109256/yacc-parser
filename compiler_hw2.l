/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#define BUF_SIZE 256

extern YYSTYPE yylval; //YYSTYPE
extern yylineno;
char buf[BUF_SIZE];

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     {CONCAT; printf("+");return ADD; }
"-" 	{CONCAT; printf("-");return SUB; }
"*" 	{CONCAT; printf("*");return MUL; }
"/" 	{CONCAT; printf("/");return DIV; }
"%"     {CONCAT; printf("%s",yytext);return MOD; }
"++"    {CONCAT; printf("++");return INC; }
"--"    {CONCAT; printf("--");return DEC; }

 /* Relational */
">"		{CONCAT; printf(">");return MT; }
"<"		{CONCAT; printf("<");return LT; }
">="	{CONCAT;  printf(">=");return MTE; }
"<="	{CONCAT; printf("<=");return LTE; }
"=="	{CONCAT; printf("==");return EQ; }
"!="	{CONCAT; printf("!=");return NE; }

 /* Assignment */
"="		{CONCAT; printf("=");return ASGN; }
"+="	{CONCAT; printf("+=");return ADDASGN; }
"-="	{CONCAT; printf("-=");return SUBASGN; }
"*="	{CONCAT; printf("*=");return MULASGN; }
"/="	{CONCAT; printf("/=");return DIVASGN; }
"%="	{CONCAT; printf("%=");return MODASGN; }

 /* Logical */
"&&"	{CONCAT; printf("&&");return AND; }
"||"	{CONCAT; printf("||");return OR; }
"!"		{CONCAT; printf("!");return NOT; }

 /* Delimiters */
"("		{CONCAT; printf("(");return LB; }
")"		{CONCAT; printf(")");return RB; }
"{"		{CONCAT; printf("{");return LCB; }
"}"		{CONCAT; printf("}");return RCB; }
"["		{CONCAT; printf("[");return LSB; }
"]"		{CONCAT; printf("]");return RSB; }
","		{CONCAT; printf(",");return COMMA; }
 

 /* Print Keywords */	
"print"		{CONCAT; printf("print");return PRINT; }

 /* Condition and Loop Keywords */
"if"		{CONCAT; printf("if");return IF; }
"else"		{CONCAT; printf("else");return ELSE; }
"for"		{CONCAT; printf("for");return FOR; }
"while"		{CONCAT; printf("while");return WHILE; }

 /* Declaration Keywords */
"void"		{CONCAT; printf("void");return VOID;}
"int"		{CONCAT; printf("int"); return INT; }
"float"  	{CONCAT; printf("float");return FLOAT; }
"string"  	{CONCAT; printf("string");return STRING; }
"bool"  	{CONCAT; printf("bool");return BOOL; }

 /* boolean Keywords */
"true"      {CONCAT; printf("true");return TRUE; }
"false"     {CONCAT; printf("false");return FALSE; }

"return"    {CONCAT; printf("return"); return RET; }
"continue"  {CONCAT; printf("continue");return CONT; }
"break"	    {CONCAT; printf("break");return BREAK; }

 /* String Constant */
\"				        {CONCAT; printf("%s",yytext); BEGIN STRING_STATE; return COMMA;}
<STRING_STATE>\"		{CONCAT; printf("%s",yytext); BEGIN INITIAL; return COMMA;}
<STRING_STATE>[^"]*		{CONCAT; printf("%s",yytext); yylval.string=yytext; return STR_CONST; }

 /* Number Constant */
{integer}	{CONCAT; yylval.i_val = atoi(yytext); printf("%s",yytext); return I_CONST; }
{float}	    {CONCAT; yylval.f_val = atof(yytext); printf("%s",yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ printf("%s",yytext);BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ printf("%s",yytext); }
<COMMENT>\n			{ printf("\n%d: ",yylineno); memset(buf,'\0',sizeof(buf)); }
<COMMENT>"*"		{ printf("%s",yytext); }
<COMMENT>"*/"		{ printf("%s",yytext);BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ printf("%s",yytext); }

 /* Variable ID */
 {id}       {CONCAT; printf("%s",yytext); return ID; }

 /* others */

[;]         {CONCAT; printf(";"); return SEMICOLON; }

[\n]        {CONCAT; printf("\n%d: ",yylineno); memset(buf,'\0',sizeof(buf));}
[ \t]		{CONCAT;printf("%s",yytext);} /* Ignore */
[^ \t\n] 	{CONCAT;} /* Ignore other charactor sets */

<<EOF>>     { printf("\r                    "); yyterminate();}
%%

int yywrap()
{
    return 1;
}
